---
title: "Analyzing TTC Delay Data to Improve Future Efficiency"
abstract: "TTC delays have been increasing over time, and especially now in a period of overhaul in many parts of the system, it becomes important to analyze the effects of subway and bus delays in relation with each other as well as commuter loads. Using data published by the TTC and accessed through `opendatatoronto` we find that the greatest causes of delays are date and time, and equipment quality. Date and time factors are out of anyones control, but must be accounted for to improve future operational efficieny, while equipment quality has also been shown to be important, with mechanical failures heavily decreasing the reliability of buses."
thanks: "Code and data supporting this analysis is available at: https://github.com/prajogt/ttc_analysis.git"
author: "Timothius Prajogi"
date: today
date-format: long
format: pdf
editor: visual
toc: true
number-sections: true
bibliography: references.bib
header-includes:
  \usepackage{placeins}
---

```{python}
#| echo: false
#| message: false
#| warning: false

#### Workspace setup ####
import matplotlib.pyplot as plt
import pandas as pd

```

## Introduction

The main source public transportation of public transportation in the city of Toronto is the TTC (Toronto Transit Commission). From this commission, the most common methods used are subways and buses. For people who frequently use these methods, delays are common and expected [@CityNewsBGrade], so much so that leaving early is leaving on time. With the delays getting worse and service becoming more inconsistent [@TorontoStarTTCDelays], it is important to analyze potential causes, which would therefore enable the TTC to explore potential solutions. One of such possible factors is the tight coupling of the subway and bus systems. When issues occur with the subway, the overflow is sent to buses, either from detoured commuter traffic, or resource reallocation in the form of converting regular route buses to shuttle buses [@TorontoObserverShuttleBuses]. Whether one uses these methods or not, having a good and reliable source of public transportation is crucial to reducing travel time for all city goers, not to mention its additional benefits for the environment.

Within this paper we will analyze the correlations between the delays occurring on the subway and the delays that occur for buses. In particular, the correlation between mechanical or security issues on the subway, which tend to shut down a portion of the track, and similar equipment and now operator failures that occur for buses. We will see the general affects of the commuter load on the transit system and how the system can be better optimized or at least supported with redundancies to prevent such frequent delays. The paper will show the trends of the amount of delays for both systems as a function of day and time. It was found that work days put additional load on both systems, the total amount of delays during weekdays being significantly higher than on other days. It is found that the cycle of the traditional work week and work day, the environment in which each exists in with regards to the facilities, equipment, and workers, have a strong correlation with delays in the TTC.

The next section will cover the content of the data and analyses on the results that were obtained from the datasets.


## Data

The datasets used for this report are the latest delay statistics from the 2023 year, `TTC Subway Delay Data` [@citesubwaydata] and `TTC Bus Delay Data` [@citebusdata], both of which were published by the TTC.

These delay statistics were downloaded, cleaned, parsed, analyzed, and visualized using R [@citeR], a statistical programming language, with package support from `tidyverse` [@citetidyverse], a collection of libraries which included the following packages that were utilized: 

* `ggplot2` [@citeggplot] 
* `dplyr` [@citedplyr] 
* `readr` [@citereadr] 
* `tibble` [@citetibble]

For additional assistance with cleaning, the `janitor` [@citejanitor] package was used. For additional assistance with report generation the `knitr` [@citeknitr] package was used.

```{python}
#| echo: false
#| message: false
#| warning: false


# Read bus delay data
bus_delay_data = pd.read_csv("data/cleaned_bus_delay_statistics.csv")

# Read subway delay data
subway_delay_data = pd.read_csv("data/cleaned_subway_delay_statistics.csv")
```

### Overview of Datasets

```{python}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-bus_delay_data
#| tbl-cap: Sample of Bus Delay Statistics


# Display a sample of the bus dataset in a table
sample_bus_delay_data = bus_delay_data.head(5)
sample_bus_delay_data.columns = ["Date", "Time", "Day", "Incident", "Min Delay", "Min Gap"]
sample_bus_delay_data
```

```{python}
#| echo: false
#| message: false
#| warning: false
#| label: tbl-subway_delay_data
#| tbl-cap: Sample of Subway Delay Statistics


# Display a sample of the subway dataset in a table
sample_subway_delay_data = subway_delay_data.head(5)
sample_subway_delay_data.columns = ["Date", "Time", "Day", "Incident", "Min Delay", "Min Gap", "Line"]
sample_subway_delay_data

```

Both the bus and subway delay dataset contain columns "Date" and "Time" in which the delay had occurred, and an "Incident" in which the type of incident that had occurred out of these 4 general types: "Operator" (for driver/operator related issues), "Security/Safety" (for fire, police, trespassing, etc.), "Equipment/Mechanical" (for equipment, track, vehicle, etc., failures), and "Miscellaneous" (for diversions and other external issues).

"Min Delay" and "Min Gap" are represented in minutes. Where "Min Delay" represents the delay in the schedule for the next bus and "Min Gap" is the scheduled time from the bus ahead of the following bus.

For the subway delay dataset, the additional feature "Line" represents the subway line in which the delay took place in. For those not familiar, these are the names of the different subway tracks the TTC utilizes. The 4 TTC lines operating in 2023 are labeled with their official name, however, the dataset also includes incidents that occurred at intersections between Yonge-University and Bloor-Danforth, which for the purposes of this report was considered separately. Additionally, lines which did not match any of the existing TTC lines were labeled "Other", as if they were significant enough to include in this dataset, they should have a relationship with the subway Incidents.

In total the bus delay dataset that @tbl-bus_delay_data samples contains 51,406 entries, whilst the subway delay dataset that @tbl-subway_delay_data samples contains 22,465 entries, a significant difference. To be precise, the amount of delays that have occurred in 2023 is 2.29 times the amount of delays that have occurred for the subway. If we further consider the filtered data, the difference amount of significant (in this case meaning with a delay time greater than 1 minute) is widened as will be discussed in @sec-issues_with_dataset. 

Both datasets went through basic cleaning for readability and irrelevant or unusable columns were removed and not considered in this report.

Originally, the subway data reported the incident causing the delay as a unique code rather than an understandable description. This description was included instead in a separate table from the same package [@citesubwaydata]. Using `merge` from dplyr [@citedplyr], the incident was mapped to a generalized version of the description to match with the same set of generalized descriptions in the bus delay data. This selection into sections based on the description important to note due to the potential subjectivity of the sorting. There are incident descriptions in which the record may fall in one or the other. Please see the data cleaning scripts for more details.


#### Issues with Dataset {#sec-issues_with_dataset}

The vast majority of entries within the subway delay dataset had a recorded delay of 0 minutes. It seems as if a delay of 0 minutes really meant a delay of strictly less than 1 minute which is reasonable for a subway system. However, since this is an assumption, I have provided the filtered dataset for reference in the source repository, which only contains delay times greater than 0 minutes.

Note that this filtered dataset has been reduced to only 8,236 entries, comprising only 36.66% of the original dataset.


### By Time

```{python}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-vstime1
#| fig-cap: "The amount of delays with respect to the time of day"
#| fig-width: 4
#| fig-height: 3

# Convert time column to datetime if not already
bus_delay_data["time"] = pd.to_datetime(bus_delay_data["time"], errors="coerce")

# Drop any rows with invalid times
valid_time_data = bus_delay_data.dropna(subset=["time"])

# Extract just the time part for histogram binning
valid_time_data["hour"] = valid_time_data["time"].dt.hour + valid_time_data["time"].dt.minute / 60

# Plot
plt.figure(figsize=(8, 4))
plt.hist(valid_time_data["hour"], bins=24, color="blue", alpha=0.75)

plt.xlabel("Time")
plt.ylabel("Count")
plt.xticks(ticks=range(0, 25, 2), labels=[f"{h}:00" for h in range(0, 25, 2)], rotation=60, ha="right")
plt.grid(axis="y", linestyle=":", linewidth=0.5)
plt.tight_layout()
plt.show()


```

```{python}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-vstime2
#| fig-cap: "The amount of delays with respect to the time of day"
#| fig-width: 4
#| fig-height: 3


# Ensure the "time" column is interpreted as a datetime
subway_delay_data["time"] = pd.to_datetime(subway_delay_data["time"], errors="coerce")

# Remove rows with invalid times
valid_times = subway_delay_data.dropna(subset=["time"])

# Convert times to fractional hours for histogram binning
valid_times["hour_decimal"] = (
    valid_times["time"].dt.hour + valid_times["time"].dt.minute / 60
)

# Plot histogram
plt.figure(figsize=(8, 4))
plt.hist(valid_times["hour_decimal"], bins=24, color="red", alpha=0.75)

plt.xlabel("Time")
plt.ylabel("Count")
plt.xticks(
    ticks=range(0, 25, 2),
    labels=[f"{h}:00" for h in range(0, 25, 2)],
    rotation=60,
    ha="right"
)
plt.grid(axis="y", linestyle=":", linewidth=0.5)
plt.tight_layout()
plt.show()

```

@fig-vstime1 and @fig-vstime2 shows the difference in the trends of delays over time. Whilst bus delays heavily spike during rush hours where traffic alongside the buses has an impact on their operation, subway delays show a less significant increase in delays. Subways do not have to deal with external traffic factors which is likely the cause of buses showing a larger amount of delays during those hours in relation with other times. Something important to note is the difference in scale that is present for all the graphs presented in this report, with the peak count of delays for @fig-vstime2 being only around half of the peak count of delays for @fig-vstime1. 

Regardless of the scale / degree of effect that the work cycle has on the TTC, it is evident that there is a strong correlation between the traditional schedule of the work day has with the amount of delays that occur. In a similar manner, the work week cycle has a similar correlation.


### By Day

```{python}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-avg_num_vsday
#| fig-cap: "The average number of delays occurred on a given day of the week"
#| fig-subcap: ["Bus Delays", "Subway Delays"]
#| layout-ncol: 2


# Define day order
ordered_days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Load and format bus data
avg_num_bus_delays_by_day = pd.read_csv("data/summaries/avg_num_bus_delays_by_day.csv")
avg_num_bus_delays_by_day["day"] = pd.Categorical(avg_num_bus_delays_by_day["day"], categories=ordered_days, ordered=True)
avg_num_bus_delays_by_day = avg_num_bus_delays_by_day.sort_values("day")

# Plot bus delays
plt.figure(figsize=(8, 4))
plt.bar(
    avg_num_bus_delays_by_day["day"],
    avg_num_bus_delays_by_day["mean_num_delays"],
    color="skyblue"
)
plt.xlabel("Day of the Week")
plt.ylabel("Mean Number of Delays")
plt.xticks(rotation=60, ha="right")
plt.grid(axis="y", linestyle=":", linewidth=0.5)
plt.tight_layout()
plt.show()

# Load and format subway data
avg_num_subway_delays_by_day = pd.read_csv("data/summaries/avg_num_subway_delays_by_day.csv")
avg_num_subway_delays_by_day["day"] = pd.Categorical(avg_num_subway_delays_by_day["day"], categories=ordered_days, ordered=True)
avg_num_subway_delays_by_day = avg_num_subway_delays_by_day.sort_values("day")

# Plot subway delays
plt.figure(figsize=(8, 4))
plt.bar(
    avg_num_subway_delays_by_day["day"],
    avg_num_subway_delays_by_day["mean_num_delays"],
    color="salmon"
)
plt.xlabel("Day of the Week")
plt.ylabel("Mean Number of Delays")
plt.xticks(rotation=60, ha="right")
plt.grid(axis="y", linestyle=":", linewidth=0.5)
plt.tight_layout()
plt.show()


```

@fig-avg_num_vsday shows the similar trends that are present in the average number of delays that occur on certain days of the week. On average Sundays in 2023 produce the lowest amount of delays. Buses and subways average 101.00 and 50.75 delays respectively on Sundays. It seems that the added commuter load or the assumption of an increased commuter load causes more delays. We cannot say for certain which of the two it is, as it is equally likely that the reason that more delays occur on certain days is because more buses and trains are scheduled more frequently to accommodate the load of working commuters. Equally, it is possible that the increase in delays is caused by a human actor. As shown by @fig-vsincident1 and @fig-vsincident2, a large part of the delays for subways are security and safety issues which is almost entirely comprised of human effects. What we can say now however, is that more preparation and further analysis into commuter effects must be done by the TTC to lower the large amount of delays caused. 


```{python}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: tbl-totalbus
#| tbl-cap: "The total and average time in minutes wasted on delays"


# Load summarized bus delay data
total_bus_delay_time_by_date = pd.read_csv("data/summaries/total_bus_delay_time_by_date.csv")

# Take 5 random rows with a fixed seed
sample_bus_delays = total_bus_delay_time_by_date.sample(n=5, random_state=302)

# Rename columns to match desired display names
sample_bus_delays.columns = [
    "Date",
    "Day",
    "Total Delay Time",
    "Delay Count",
    "Average Delay Time"
]

# Display the sample table
sample_bus_delays

```

```{python}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-fullyear
#| fig-cap: "Bus Total and Average Delays in Time (Minutes)"
#| fig-subcap: ["Total Delay Time", "Average Delay Time"]
#| layout-ncol: 2

plt.figure(figsize=(10, 4))
plt.scatter(
    total_bus_delay_time_by_date["date"],
    total_bus_delay_time_by_date["total_delay_time"],
    color="blue", alpha=0.6
)
plt.xlabel("Date")
plt.ylabel("Total Delay Time (Minutes)")
plt.grid(axis="y", linestyle=":", linewidth=0.5)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))
plt.scatter(
    total_bus_delay_time_by_date["date"],
    total_bus_delay_time_by_date["mean_delay_time"],
    color="green", alpha=0.6
)
plt.xlabel("Date")
plt.ylabel("Total Delay Time (Minutes)")
plt.grid(axis="y", linestyle=":", linewidth=0.5)
plt.tight_layout()
plt.show()


```


Here @tbl-totalbus is a random sampling of dates in 2023 and the total amount both in time (minutes) and quantity of delays that occur on that particular date. So much time is wasted on delays for commuters, supporting the claim that City News [@CityNewsBGrade] made about the quality of service. Seeing this further in @fig-fullyear, we see that the average bus commuter spends around 20-25 minutes every day waiting for delays, and the TTC overall has wasted around 30,000 minutes (500 hours) of commuters time as a whole.


### By Incident

```{python}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-vsincident1
#| fig-cap: "The average number of delays occurred due to incident types"

# Load summarized data
bus_delays_by_incident = pd.read_csv("data/summaries/total_num_bus_delays_by_incident.csv")

# Plot
plt.figure(figsize=(8, 4))
bars = plt.bar(
    bus_delays_by_incident["incident"],
    bus_delays_by_incident["n"],
    color=plt.cm.Set2.colors  # distinct fill colors
)

plt.xlabel("Incident Type")
plt.ylabel("Delay Count")
plt.xticks(rotation=60, ha="right")
plt.grid(axis="y", linestyle=":", linewidth=0.5)

# Add legend manually
incident_labels = bus_delays_by_incident["incident"].tolist()
plt.legend(bars, incident_labels, title="Incident Type", bbox_to_anchor=(1.05, 1), loc="upper left")

plt.tight_layout()
plt.show()

```

```{python}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-vsincident2
#| fig-cap: "The average number of delays occurred due to incident types"


# Load summarized data
subway_delays_by_incident = pd.read_csv("data/summaries/total_num_subway_delays_by_incident.csv")

# Plot
plt.figure(figsize=(8, 4))
bars = plt.bar(
    subway_delays_by_incident["incident"],
    subway_delays_by_incident["n"],
    color=plt.cm.Set2.colors
)

plt.xlabel("Incident Type")
plt.ylabel("Delay Count")
plt.xticks(rotation=60, ha="right")
plt.grid(axis="y", linestyle=":", linewidth=0.5)

# Add legend
incident_labels = subway_delays_by_incident["incident"].tolist()
plt.legend(bars, incident_labels, title="Incident Type", bbox_to_anchor=(1.05, 1), loc="upper left")

plt.tight_layout()
plt.show()

```

From @fig-vsincident2 we can see that the leading cause of delay on the subways is "Security/Safety" incidents with 15,367 delays caused by such issues, with the next leading incident being "Equipment/Mechanical" issues with 4,005 delays occurred. "Security/Safety" covers track invasions, unsanitary trains, fire, etc. and "Equipment/Mechanical" covers any problems occurring with the functionality of the trains, the station, and the tracks. From personal experience, these results are expected. Comparatively, bus delays in @fig-vsincident1 are majorly caused by "Equipment/Mechanical" issues with 18,786 caused. The second leading incident type is operator issues which covers any problems with the driver of the buses. These incidents account for 14,400 delays. These results pose an interesting connection. 

From the TTC website, we know that they have been moving towards implementing automation in the operation of subway services since 2022[@TTCAutomation]. This has not been possible for buses which is why operator error is still high on the list. This could also be explained by the ratio of operators to commuters. Whilst each bus requires an operator, multiple cars on a subway only require 1-2 operators especially with the addition of automated signalling. Similarly, the lack of employee oversight within stations and subways can explain the difference in security and safety issues. Buses don't have much to oversee, however since stations are large and employees are only stationed within the entrance floor, prevention of disruptive behaviour is more commonplace as displayed by @fig-vsincident2 above.


### By Line {#sec-by_line}

```{python}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-vsline
#| fig-cap: "The number of delays on each TTC Line"

# Load summarized data
subway_delays_by_line = pd.read_csv("data/summaries/total_num_subway_delays_by_line.csv")

# Plot
plt.figure(figsize=(8, 4))
bars = plt.bar(
    subway_delays_by_line["line"],
    subway_delays_by_line["n"],
    color=plt.cm.Set2.colors  # visually distinct colors
)

plt.xlabel("TTC Line")
plt.ylabel("Number of Delays")
plt.xticks(rotation=60, ha="right")
plt.grid(axis="y", linestyle=":", linewidth=0.5)

# Optional: Add legend
line_labels = subway_delays_by_line["line"].tolist()
plt.legend(bars, line_labels, title="TTC Line", bbox_to_anchor=(1.05, 1), loc="upper left")

plt.tight_layout()
plt.show()

```

From @fig-vsline we see an expected result, where the longest (and oldest) lines with Yonge-University having 38 stations and Bloor-Danforth having 31 compared to Sheppard's 5 and Scarborough's 6 (previously existing) stations. With the load that these older lines are experiencing on a daily basis, the result from our analysis on delay causes is further supported. Constant maintenance and repair is required for these lines, and increased ridership also puts extra stress on the systems. Further engineering analysis is required to definitively know the extent of the effects of stress loads on these lines, and if those are the cause for the increase in delays.


\FloatBarrier
## Conclusion

In conclusion, the analysis of TTC delays has revealed critical factors impacting the efficiency and reliability of Toronto's major transit system. Analyzing data obtained from the TTC through `opendatatoronto`, we identified date and time, equipment quality, and operation failure as the major contributors to delays. Although we cannot control date and time factors, acknowledging them and their effects on the system is vital for improving future operational efficiency. Recognizing the impact of equipment quality, particularly in relation to bus mechanical failures, highlights the need for specific upgrades and maintenance in transit infrastructure. The insights from this analysis can guide future spending and research, in an attempt to be a part of the effort to enhance the TTC system for the benefit of both commuters and the city.


\newpage
## References
